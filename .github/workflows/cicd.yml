name: DevOps Terraform + Ansible CI/CD

on:
  workflow_dispatch:

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
  DOCKERHUB_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKERHUB_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

jobs:
  terraform:
    name: Terraform Infrastructure
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform (and configure CLI token for Terraform Cloud)
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.3
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        working-directory: terraform/environment/dev
        run: terraform init -input=false

      - name: Terraform Plan
        working-directory: terraform/environment/dev
        run: terraform plan -out=tfplan -input=false

      - name: Terraform Apply
        working-directory: terraform/environment/dev
        run: terraform apply -auto-approve tfplan -input=false

      - name: Output kubeconfig
        working-directory: terraform/environment/dev
        run: terraform output -raw kubeconfig > kubeconfig.yaml

      - name: Upload kubeconfig
        uses: actions/upload-artifact@v4
        with:
          name: kubeconfig
          path: terraform/environment/dev/kubeconfig.yaml

  docker_build:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    needs: terraform

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_PASSWORD }}

      - name: Build & Push Frontend Docker Image
        run: |
          docker build -t $DOCKERHUB_USERNAME/devops-terra-ansible-frontend:latest ./frontend
          docker push $DOCKERHUB_USERNAME/devops-terra-ansible-frontend:latest

      - name: Build & Push Backend Docker Image
        run: |
          docker build -t $DOCKERHUB_USERNAME/devops-terra-ansible-backend:latest ./backend
          docker push $DOCKERHUB_USERNAME/devops-terra-ansible-backend:latest

  ansible_deploy:
    name: Ansible Deploy to EKS
    runs-on: ubuntu-latest
    needs: docker_build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download kubeconfig
        uses: actions/download-artifact@v4
        with:
          name: kubeconfig
          path: ./kubeconfig

      - name: Install Ansible & Python deps
        run: |
          sudo apt update -y
          sudo apt install -y python3-pip sshpass
          python3 -m pip install --upgrade pip
          pip3 install ansible boto3 kubernetes

      - name: Run Ansible Playbook (apply k8s manifests only)
        env:
          KUBECONFIG: ${{ github.workspace }}/kubeconfig/kubeconfig.yaml
        run: |
          # If your deploy-app.yml contains roles that install docker/node-setup,
          # skip those when running in CI. Use --skip-tags on roles tagged "node-setup,docker"
          ansible-playbook ansible/playbooks/deploy-app.yml -i ansible/inventories/dev/hosts.yml \
            --skip-tags "node-setup,docker" \
            -e "docker_username=${{ env.DOCKERHUB_USERNAME }}" \
            -e "docker_password=${{ env.DOCKERHUB_PASSWORD }}" \
            -e "aws_access_key_id=${{ env.AWS_ACCESS_KEY_ID }}" \
            -e "aws_secret_access_key=${{ env.AWS_SECRET_ACCESS_KEY }}" \
            -e "aws_region=${{ env.AWS_REGION }}"
