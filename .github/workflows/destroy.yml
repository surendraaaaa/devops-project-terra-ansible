name: Destroy Infra & Clean Environment

on:
  workflow_dispatch:

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
  DOCKERHUB_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKERHUB_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

jobs:
  destroy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Terraform (for Terraform Cloud)
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.0
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init (required for Terraform Cloud)
        working-directory: terraform/environment/dev
        run: terraform init -input=false

      - name: Terraform Destroy
        working-directory: terraform/environment/dev
        run: terraform destroy -auto-approve -input=false

      - name: Set up Python & Ansible
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Ansible & Kubernetes collection
        run: |
          python -m pip install --upgrade pip
          pip install ansible boto3 kubernetes
          ansible-galaxy collection install kubernetes.core

      - name: Clean K8s Resources (optional)
        env:
          KUBECONFIG: ${{ github.workspace }}/kubeconfig/kubeconfig.yaml
        run: |
          # If you still have kubeconfig artifact, you can download it and clean.
          # Otherwise this step may fail if cluster already destroyed - guard with || true
          if [ -f ./kubeconfig/kubeconfig.yaml ]; then
            ansible-playbook ./ansible/playbooks/clean-env.yml -i ./ansible/inventories/dev/hosts.yml \
              -e "aws_region=${{ env.AWS_REGION }}" || true
          else
            echo "No kubeconfig found; cluster likely already destroyed."
          fi

      - name: Docker Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Clean Docker on runner (best-effort)
        run: |
          docker stop $(docker ps -aq) || true
          docker rm $(docker ps -aq) || true
          docker rmi $(docker images -q) || true
